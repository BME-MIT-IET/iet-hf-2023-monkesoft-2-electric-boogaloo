//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : Effect.java
//  @ Date : 2022. 03. 23.
//  @ Author :
//
//


/**
 * A virológusra gyakorolt hatások absztrakt ősosztálya. Minden leszármazottja egy singleton, 
 * amikről az AppliedEffekt osztály példányai egy referenciát tárolnak.
 */

public abstract class Effect {
	String name;
	public int Time;
	Effect(String name)
	{
		this.name = name;
		this.Time = 5;
	}
/**
 * 	Az adott effekt kifejti a paraméterként kapott virológusra a hatását. Készít egy AppliedEffekt példányt, 
 * ami eltárolja az adott effektet és hozzáadja a virológus AppliedEffekt tárolójához.
 */
	public void Apply(Virologist v) {
		///Overridden in all effects with -1 Time
		AppliedEffect ae = new AppliedEffect(v, this);
		return;
	}

	public void Die(Virologist v) {
		v.RemoveEffect(this);
	}
/**
 *  A visszatérési értéke megmondja, hogy az adott effekt véd-e a paraméterként kapott effekttől. 
 *  Alapból a visszatérési értéke false, de a leszármazottak a saját felelősségeik szerint override-olják. A paraméterként kapott virológus az, 
 *  aki az effektet el akarja helyezni arra a virológusra, 
 *  akire az effekt hat.
 * 
 * @param a
 * @param v
 * @return
 */
	public boolean Protect(Agent a, Virologist v, Virologist v2) {
		return false;

	}
/**
 *  Ha az effekt befolyásolja az egész kört, akkor true-val, 
 *  egyébként false-al tér vissza.
 * @param v
 * @return
 */
	
	/**
	 * Ha az effekt befolyásolja a lépés kimenetelét, akkor true-val, 
	 * egyébként false-al tér vissza.
	 * @param v
	 * @return
	 */
	public boolean ModMove(Virologist v) {
		return false;
	}

	/**
	 * Ha az effekt befolyásolja az egész kört, akkor true-val, egyébként false-al tér vissza.
	 * @param v
	 * @return
	 */
	public boolean ModRound(Virologist v) {
		return false;

	}
	@Override
	public String toString()
	{
		return name;
	}
	
	public int getTime() {
		return this.Time;
	}
	
}
